;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit LastAssignTester : 
  module LastAssignTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg value : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T = eq(value, UInt<1>("h01")) @[Counter.scala 37:24]
      node _T_1 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_2 = tail(_T_1, 1) @[Counter.scala 38:22]
      value <= _T_2 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node wrap = and(UInt<1>("h01"), _T) @[Counter.scala 72:20]
    wire test : UInt<4> @[MultiAssign.scala 13:18]
    node _T_3 = eq(test, UInt<3>("h07")) @[MultiAssign.scala 14:15]
    node _T_4 = bits(reset, 0, 0) @[MultiAssign.scala 14:9]
    node _T_5 = or(_T_3, _T_4) @[MultiAssign.scala 14:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[MultiAssign.scala 14:9]
    when _T_6 : @[MultiAssign.scala 14:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at MultiAssign.scala:14 assert(test === 7.U)  // allow read references before assign references\n") @[MultiAssign.scala 14:9]
      stop(clock, UInt<1>(1), 1) @[MultiAssign.scala 14:9]
      skip @[MultiAssign.scala 14:9]
    test <= UInt<4>("h0d") @[MultiAssign.scala 16:8]
    node _T_7 = eq(test, UInt<3>("h07")) @[MultiAssign.scala 17:15]
    node _T_8 = bits(reset, 0, 0) @[MultiAssign.scala 17:9]
    node _T_9 = or(_T_7, _T_8) @[MultiAssign.scala 17:9]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[MultiAssign.scala 17:9]
    when _T_10 : @[MultiAssign.scala 17:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at MultiAssign.scala:17 assert(test === 7.U)  // output value should be position-independent\n") @[MultiAssign.scala 17:9]
      stop(clock, UInt<1>(1), 1) @[MultiAssign.scala 17:9]
      skip @[MultiAssign.scala 17:9]
    test <= UInt<3>("h07") @[MultiAssign.scala 19:8]
    node _T_11 = eq(test, UInt<3>("h07")) @[MultiAssign.scala 20:15]
    node _T_12 = bits(reset, 0, 0) @[MultiAssign.scala 20:9]
    node _T_13 = or(_T_11, _T_12) @[MultiAssign.scala 20:9]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[MultiAssign.scala 20:9]
    when _T_14 : @[MultiAssign.scala 20:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at MultiAssign.scala:20 assert(test === 7.U)  // this obviously should work\n") @[MultiAssign.scala 20:9]
      stop(clock, UInt<1>(1), 1) @[MultiAssign.scala 20:9]
      skip @[MultiAssign.scala 20:9]
    node _T_15 = eq(value, UInt<1>("h01")) @[MultiAssign.scala 22:12]
    when _T_15 : @[MultiAssign.scala 22:21]
      node _T_16 = bits(reset, 0, 0) @[MultiAssign.scala 23:9]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[MultiAssign.scala 23:9]
      when _T_17 : @[MultiAssign.scala 23:9]
        stop(clock, UInt<1>(1), 0) @[MultiAssign.scala 23:9]
        skip @[MultiAssign.scala 23:9]
      skip @[MultiAssign.scala 22:21]
    
