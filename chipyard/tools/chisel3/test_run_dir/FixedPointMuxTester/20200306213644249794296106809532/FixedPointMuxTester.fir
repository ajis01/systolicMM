;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit FixedPointMuxTester : 
  module FixedPointMuxTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire unknownFixed : Fixed @[FixedPointSpec.scala 85:26]
    unknownFixed <= asFixedPoint(UInt<2>("h01"), 2) @[FixedPointSpec.scala 86:16]
    node _T = mux(UInt<1>("h01"), asFixedPoint(UInt<4>("h06"), 0), asFixedPoint(UInt<2>("h01"), 2)) @[FixedPointSpec.scala 88:13]
    node _T_1 = eq(_T, asFixedPoint(UInt<4>("h06"), 0)) @[FixedPointSpec.scala 88:71]
    node _T_2 = bits(reset, 0, 0) @[FixedPointSpec.scala 88:9]
    node _T_3 = or(_T_1, _T_2) @[FixedPointSpec.scala 88:9]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[FixedPointSpec.scala 88:9]
    when _T_4 : @[FixedPointSpec.scala 88:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at FixedPointSpec.scala:88 assert(Mux(true.B, largeWidthLowPrecision, smallWidthHighPrecision) === 6.0.F(0.BP))\n") @[FixedPointSpec.scala 88:9]
      stop(clock, UInt<1>(1), 1) @[FixedPointSpec.scala 88:9]
      skip @[FixedPointSpec.scala 88:9]
    node _T_5 = mux(UInt<1>("h00"), asFixedPoint(UInt<4>("h06"), 0), asFixedPoint(UInt<2>("h01"), 2)) @[FixedPointSpec.scala 89:13]
    node _T_6 = eq(_T_5, asFixedPoint(UInt<2>("h01"), 2)) @[FixedPointSpec.scala 89:72]
    node _T_7 = bits(reset, 0, 0) @[FixedPointSpec.scala 89:9]
    node _T_8 = or(_T_6, _T_7) @[FixedPointSpec.scala 89:9]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[FixedPointSpec.scala 89:9]
    when _T_9 : @[FixedPointSpec.scala 89:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at FixedPointSpec.scala:89 assert(Mux(false.B, largeWidthLowPrecision, smallWidthHighPrecision) === 0.25.F(2.BP))\n") @[FixedPointSpec.scala 89:9]
      stop(clock, UInt<1>(1), 1) @[FixedPointSpec.scala 89:9]
      skip @[FixedPointSpec.scala 89:9]
    node _T_10 = mux(UInt<1>("h00"), asFixedPoint(UInt<4>("h06"), 0), unknownFixed) @[FixedPointSpec.scala 90:13]
    node _T_11 = eq(_T_10, asFixedPoint(UInt<2>("h01"), 2)) @[FixedPointSpec.scala 90:61]
    node _T_12 = bits(reset, 0, 0) @[FixedPointSpec.scala 90:9]
    node _T_13 = or(_T_11, _T_12) @[FixedPointSpec.scala 90:9]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[FixedPointSpec.scala 90:9]
    when _T_14 : @[FixedPointSpec.scala 90:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at FixedPointSpec.scala:90 assert(Mux(false.B, largeWidthLowPrecision, unknownFixed) === 0.25.F(2.BP))\n") @[FixedPointSpec.scala 90:9]
      stop(clock, UInt<1>(1), 1) @[FixedPointSpec.scala 90:9]
      skip @[FixedPointSpec.scala 90:9]
    node _T_15 = mux(UInt<1>("h01"), asFixedPoint(UInt<4>("h06"), 0), asFixedPoint(UInt<2>("h01"), 2)) @[FixedPointSpec.scala 91:13]
    node _T_16 = eq(_T_15, asFixedPoint(UInt<4>("h06"), 0)) @[FixedPointSpec.scala 91:73]
    node _T_17 = bits(reset, 0, 0) @[FixedPointSpec.scala 91:9]
    node _T_18 = or(_T_16, _T_17) @[FixedPointSpec.scala 91:9]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[FixedPointSpec.scala 91:9]
    when _T_19 : @[FixedPointSpec.scala 91:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at FixedPointSpec.scala:91 assert(Mux(true.B, unknownWidthLowPrecision, smallWidthHighPrecision) === 6.0.F(0.BP))\n") @[FixedPointSpec.scala 91:9]
      stop(clock, UInt<1>(1), 1) @[FixedPointSpec.scala 91:9]
      skip @[FixedPointSpec.scala 91:9]
    node _T_20 = bits(reset, 0, 0) @[FixedPointSpec.scala 93:7]
    node _T_21 = eq(_T_20, UInt<1>("h00")) @[FixedPointSpec.scala 93:7]
    when _T_21 : @[FixedPointSpec.scala 93:7]
      stop(clock, UInt<1>(1), 0) @[FixedPointSpec.scala 93:7]
      skip @[FixedPointSpec.scala 93:7]
    
