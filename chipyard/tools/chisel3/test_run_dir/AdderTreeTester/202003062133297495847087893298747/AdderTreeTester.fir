;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit AdderTreeTester : 
  module AdderTree : 
    input clock : Clock
    input reset : Reset
    output io : {flip numIn : UInt<2>[20], numOut : UInt<2>}
    
    node _T = add(io.numIn[0], io.numIn[1]) @[AdderTree.scala 11:57]
    node _T_1 = tail(_T, 1) @[AdderTree.scala 11:57]
    node _T_2 = add(io.numIn[2], io.numIn[3]) @[AdderTree.scala 11:57]
    node _T_3 = tail(_T_2, 1) @[AdderTree.scala 11:57]
    node _T_4 = add(io.numIn[4], io.numIn[5]) @[AdderTree.scala 11:57]
    node _T_5 = tail(_T_4, 1) @[AdderTree.scala 11:57]
    node _T_6 = add(io.numIn[6], io.numIn[7]) @[AdderTree.scala 11:57]
    node _T_7 = tail(_T_6, 1) @[AdderTree.scala 11:57]
    node _T_8 = add(io.numIn[8], io.numIn[9]) @[AdderTree.scala 11:57]
    node _T_9 = tail(_T_8, 1) @[AdderTree.scala 11:57]
    node _T_10 = add(io.numIn[10], io.numIn[11]) @[AdderTree.scala 11:57]
    node _T_11 = tail(_T_10, 1) @[AdderTree.scala 11:57]
    node _T_12 = add(io.numIn[12], io.numIn[13]) @[AdderTree.scala 11:57]
    node _T_13 = tail(_T_12, 1) @[AdderTree.scala 11:57]
    node _T_14 = add(io.numIn[14], io.numIn[15]) @[AdderTree.scala 11:57]
    node _T_15 = tail(_T_14, 1) @[AdderTree.scala 11:57]
    node _T_16 = add(io.numIn[16], io.numIn[17]) @[AdderTree.scala 11:57]
    node _T_17 = tail(_T_16, 1) @[AdderTree.scala 11:57]
    node _T_18 = add(io.numIn[18], io.numIn[19]) @[AdderTree.scala 11:57]
    node _T_19 = tail(_T_18, 1) @[AdderTree.scala 11:57]
    wire _T_20 : UInt<2>[10] @[AdderTree.scala 11:35]
    _T_20[0] <= _T_1 @[AdderTree.scala 11:35]
    _T_20[1] <= _T_3 @[AdderTree.scala 11:35]
    _T_20[2] <= _T_5 @[AdderTree.scala 11:35]
    _T_20[3] <= _T_7 @[AdderTree.scala 11:35]
    _T_20[4] <= _T_9 @[AdderTree.scala 11:35]
    _T_20[5] <= _T_11 @[AdderTree.scala 11:35]
    _T_20[6] <= _T_13 @[AdderTree.scala 11:35]
    _T_20[7] <= _T_15 @[AdderTree.scala 11:35]
    _T_20[8] <= _T_17 @[AdderTree.scala 11:35]
    _T_20[9] <= _T_19 @[AdderTree.scala 11:35]
    node _T_21 = add(_T_20[0], _T_20[1]) @[AdderTree.scala 11:57]
    node _T_22 = tail(_T_21, 1) @[AdderTree.scala 11:57]
    node _T_23 = add(_T_20[2], _T_20[3]) @[AdderTree.scala 11:57]
    node _T_24 = tail(_T_23, 1) @[AdderTree.scala 11:57]
    node _T_25 = add(_T_20[4], _T_20[5]) @[AdderTree.scala 11:57]
    node _T_26 = tail(_T_25, 1) @[AdderTree.scala 11:57]
    node _T_27 = add(_T_20[6], _T_20[7]) @[AdderTree.scala 11:57]
    node _T_28 = tail(_T_27, 1) @[AdderTree.scala 11:57]
    node _T_29 = add(_T_20[8], _T_20[9]) @[AdderTree.scala 11:57]
    node _T_30 = tail(_T_29, 1) @[AdderTree.scala 11:57]
    wire _T_31 : UInt<2>[5] @[AdderTree.scala 11:35]
    _T_31[0] <= _T_22 @[AdderTree.scala 11:35]
    _T_31[1] <= _T_24 @[AdderTree.scala 11:35]
    _T_31[2] <= _T_26 @[AdderTree.scala 11:35]
    _T_31[3] <= _T_28 @[AdderTree.scala 11:35]
    _T_31[4] <= _T_30 @[AdderTree.scala 11:35]
    node _T_32 = add(_T_31[0], _T_31[1]) @[AdderTree.scala 11:57]
    node _T_33 = tail(_T_32, 1) @[AdderTree.scala 11:57]
    node _T_34 = add(_T_31[2], _T_31[3]) @[AdderTree.scala 11:57]
    node _T_35 = tail(_T_34, 1) @[AdderTree.scala 11:57]
    wire _T_36 : UInt<2>[3] @[AdderTree.scala 11:35]
    _T_36[0] <= _T_33 @[AdderTree.scala 11:35]
    _T_36[1] <= _T_35 @[AdderTree.scala 11:35]
    _T_36[2] <= _T_31[4] @[AdderTree.scala 11:35]
    node _T_37 = add(_T_36[0], _T_36[1]) @[AdderTree.scala 11:57]
    node _T_38 = tail(_T_37, 1) @[AdderTree.scala 11:57]
    wire _T_39 : UInt<2>[2] @[AdderTree.scala 11:35]
    _T_39[0] <= _T_38 @[AdderTree.scala 11:35]
    _T_39[1] <= _T_36[2] @[AdderTree.scala 11:35]
    node _T_40 = add(_T_39[0], _T_39[1]) @[AdderTree.scala 11:57]
    node _T_41 = tail(_T_40, 1) @[AdderTree.scala 11:57]
    wire _T_42 : UInt<2>[1] @[AdderTree.scala 11:35]
    _T_42[0] <= _T_41 @[AdderTree.scala 11:35]
    io.numOut <= _T_42[0] @[AdderTree.scala 11:13]
    
  module AdderTreeTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst dut of AdderTree @[AdderTree.scala 16:19]
    dut.clock <= clock
    dut.reset <= reset
    wire _T : UInt<2>[20] @[AdderTree.scala 17:26]
    _T[0] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[1] <= UInt<2>("h00") @[AdderTree.scala 17:26]
    _T[2] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[3] <= UInt<2>("h00") @[AdderTree.scala 17:26]
    _T[4] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[5] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[6] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    _T[7] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    _T[8] <= UInt<2>("h03") @[AdderTree.scala 17:26]
    _T[9] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    _T[10] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    _T[11] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[12] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[13] <= UInt<2>("h01") @[AdderTree.scala 17:26]
    _T[14] <= UInt<2>("h00") @[AdderTree.scala 17:26]
    _T[15] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    _T[16] <= UInt<2>("h03") @[AdderTree.scala 17:26]
    _T[17] <= UInt<2>("h00") @[AdderTree.scala 17:26]
    _T[18] <= UInt<2>("h00") @[AdderTree.scala 17:26]
    _T[19] <= UInt<2>("h02") @[AdderTree.scala 17:26]
    dut.io.numIn[0] <= _T[0] @[AdderTree.scala 17:16]
    dut.io.numIn[1] <= _T[1] @[AdderTree.scala 17:16]
    dut.io.numIn[2] <= _T[2] @[AdderTree.scala 17:16]
    dut.io.numIn[3] <= _T[3] @[AdderTree.scala 17:16]
    dut.io.numIn[4] <= _T[4] @[AdderTree.scala 17:16]
    dut.io.numIn[5] <= _T[5] @[AdderTree.scala 17:16]
    dut.io.numIn[6] <= _T[6] @[AdderTree.scala 17:16]
    dut.io.numIn[7] <= _T[7] @[AdderTree.scala 17:16]
    dut.io.numIn[8] <= _T[8] @[AdderTree.scala 17:16]
    dut.io.numIn[9] <= _T[9] @[AdderTree.scala 17:16]
    dut.io.numIn[10] <= _T[10] @[AdderTree.scala 17:16]
    dut.io.numIn[11] <= _T[11] @[AdderTree.scala 17:16]
    dut.io.numIn[12] <= _T[12] @[AdderTree.scala 17:16]
    dut.io.numIn[13] <= _T[13] @[AdderTree.scala 17:16]
    dut.io.numIn[14] <= _T[14] @[AdderTree.scala 17:16]
    dut.io.numIn[15] <= _T[15] @[AdderTree.scala 17:16]
    dut.io.numIn[16] <= _T[16] @[AdderTree.scala 17:16]
    dut.io.numIn[17] <= _T[17] @[AdderTree.scala 17:16]
    dut.io.numIn[18] <= _T[18] @[AdderTree.scala 17:16]
    dut.io.numIn[19] <= _T[19] @[AdderTree.scala 17:16]
    node sumCorrect = eq(dut.io.numOut, UInt<2>("h01")) @[AdderTree.scala 18:34]
    node _T_1 = bits(reset, 0, 0) @[AdderTree.scala 19:9]
    node _T_2 = or(sumCorrect, _T_1) @[AdderTree.scala 19:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[AdderTree.scala 19:9]
    when _T_3 : @[AdderTree.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at AdderTree.scala:19 assert(sumCorrect)\n") @[AdderTree.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[AdderTree.scala 19:9]
      skip @[AdderTree.scala 19:9]
    node _T_4 = bits(reset, 0, 0) @[AdderTree.scala 20:7]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[AdderTree.scala 20:7]
    when _T_5 : @[AdderTree.scala 20:7]
      stop(clock, UInt<1>(1), 0) @[AdderTree.scala 20:7]
      skip @[AdderTree.scala 20:7]
    
