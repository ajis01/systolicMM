;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit AsyncResetAggregateTester : 
  module AsyncResetAggregateTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T = eq(value, UInt<2>("h03")) @[Counter.scala 37:24]
      node _T_1 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_2 = tail(_T_1, 1) @[Counter.scala 38:22]
      value <= _T_2 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node cDiv = and(UInt<1>("h01"), _T) @[Counter.scala 72:20]
    node slowClk = asClock(cDiv) @[AsyncResetSpec.scala 47:22]
    reg value_1 : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T_3 = eq(value_1, UInt<4>("h0f")) @[Counter.scala 37:24]
      node _T_4 = add(value_1, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 38:22]
      value_1 <= _T_5 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node done = and(UInt<1>("h01"), _T_3) @[Counter.scala 72:20]
    reg asyncResetNext : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AsyncResetSpec.scala 51:31]
    node _T_6 = eq(value_1, UInt<3>("h04")) @[AsyncResetSpec.scala 52:27]
    asyncResetNext <= _T_6 @[AsyncResetSpec.scala 52:18]
    node asyncReset = asAsyncReset(asyncResetNext) @[AsyncResetSpec.scala 53:35]
    wire _T_7 : {x : UInt<8>, y : UInt<8>}[2] @[AsyncResetSpec.scala 56:20]
    _T_7[0].x <= UInt<1>("h00") @[AsyncResetSpec.scala 57:15]
    _T_7[0].y <= UInt<1>("h00") @[AsyncResetSpec.scala 58:15]
    _T_7[1].x <= UInt<1>("h00") @[AsyncResetSpec.scala 59:15]
    _T_7[1].y <= UInt<1>("h00") @[AsyncResetSpec.scala 60:15]
    reg reg : {x : UInt<8>, y : UInt<8>}[2], slowClk with : (reset => (asyncReset, _T_7)) @[AsyncResetSpec.scala 61:12]
    reg[0].x <= UInt<3>("h05") @[AsyncResetSpec.scala 63:12]
    reg[0].y <= UInt<3>("h06") @[AsyncResetSpec.scala 64:12]
    reg[1].x <= UInt<3>("h07") @[AsyncResetSpec.scala 65:12]
    reg[1].y <= UInt<4>("h08") @[AsyncResetSpec.scala 66:12]
    node _T_8 = eq(value_1, UInt<2>("h03")) @[AsyncResetSpec.scala 68:15]
    when _T_8 : @[AsyncResetSpec.scala 68:24]
      node _T_9 = eq(reg[0].x, UInt<3>("h05")) @[AsyncResetSpec.scala 69:21]
      node _T_10 = bits(reset, 0, 0) @[AsyncResetSpec.scala 69:11]
      node _T_11 = or(_T_9, _T_10) @[AsyncResetSpec.scala 69:11]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[AsyncResetSpec.scala 69:11]
      when _T_12 : @[AsyncResetSpec.scala 69:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:69 assert(reg(0).x === 5.U)\n") @[AsyncResetSpec.scala 69:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 69:11]
        skip @[AsyncResetSpec.scala 69:11]
      node _T_13 = eq(reg[0].y, UInt<3>("h06")) @[AsyncResetSpec.scala 70:21]
      node _T_14 = bits(reset, 0, 0) @[AsyncResetSpec.scala 70:11]
      node _T_15 = or(_T_13, _T_14) @[AsyncResetSpec.scala 70:11]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[AsyncResetSpec.scala 70:11]
      when _T_16 : @[AsyncResetSpec.scala 70:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:70 assert(reg(0).y === 6.U)\n") @[AsyncResetSpec.scala 70:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 70:11]
        skip @[AsyncResetSpec.scala 70:11]
      node _T_17 = eq(reg[1].x, UInt<3>("h07")) @[AsyncResetSpec.scala 71:21]
      node _T_18 = bits(reset, 0, 0) @[AsyncResetSpec.scala 71:11]
      node _T_19 = or(_T_17, _T_18) @[AsyncResetSpec.scala 71:11]
      node _T_20 = eq(_T_19, UInt<1>("h00")) @[AsyncResetSpec.scala 71:11]
      when _T_20 : @[AsyncResetSpec.scala 71:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:71 assert(reg(1).x === 7.U)\n") @[AsyncResetSpec.scala 71:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 71:11]
        skip @[AsyncResetSpec.scala 71:11]
      node _T_21 = eq(reg[1].y, UInt<4>("h08")) @[AsyncResetSpec.scala 72:21]
      node _T_22 = bits(reset, 0, 0) @[AsyncResetSpec.scala 72:11]
      node _T_23 = or(_T_21, _T_22) @[AsyncResetSpec.scala 72:11]
      node _T_24 = eq(_T_23, UInt<1>("h00")) @[AsyncResetSpec.scala 72:11]
      when _T_24 : @[AsyncResetSpec.scala 72:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:72 assert(reg(1).y === 8.U)\n") @[AsyncResetSpec.scala 72:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 72:11]
        skip @[AsyncResetSpec.scala 72:11]
      skip @[AsyncResetSpec.scala 68:24]
    node _T_25 = geq(value_1, UInt<3>("h05")) @[AsyncResetSpec.scala 74:15]
    node _T_26 = lt(value_1, UInt<3>("h07")) @[AsyncResetSpec.scala 74:31]
    node _T_27 = and(_T_25, _T_26) @[AsyncResetSpec.scala 74:22]
    when _T_27 : @[AsyncResetSpec.scala 74:38]
      node _T_28 = eq(reg[0].x, UInt<1>("h00")) @[AsyncResetSpec.scala 75:21]
      node _T_29 = bits(reset, 0, 0) @[AsyncResetSpec.scala 75:11]
      node _T_30 = or(_T_28, _T_29) @[AsyncResetSpec.scala 75:11]
      node _T_31 = eq(_T_30, UInt<1>("h00")) @[AsyncResetSpec.scala 75:11]
      when _T_31 : @[AsyncResetSpec.scala 75:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:75 assert(reg(0).x === 0.U)\n") @[AsyncResetSpec.scala 75:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 75:11]
        skip @[AsyncResetSpec.scala 75:11]
      node _T_32 = eq(reg[0].y, UInt<1>("h00")) @[AsyncResetSpec.scala 76:21]
      node _T_33 = bits(reset, 0, 0) @[AsyncResetSpec.scala 76:11]
      node _T_34 = or(_T_32, _T_33) @[AsyncResetSpec.scala 76:11]
      node _T_35 = eq(_T_34, UInt<1>("h00")) @[AsyncResetSpec.scala 76:11]
      when _T_35 : @[AsyncResetSpec.scala 76:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:76 assert(reg(0).y === 0.U)\n") @[AsyncResetSpec.scala 76:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 76:11]
        skip @[AsyncResetSpec.scala 76:11]
      node _T_36 = eq(reg[1].x, UInt<1>("h00")) @[AsyncResetSpec.scala 77:21]
      node _T_37 = bits(reset, 0, 0) @[AsyncResetSpec.scala 77:11]
      node _T_38 = or(_T_36, _T_37) @[AsyncResetSpec.scala 77:11]
      node _T_39 = eq(_T_38, UInt<1>("h00")) @[AsyncResetSpec.scala 77:11]
      when _T_39 : @[AsyncResetSpec.scala 77:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:77 assert(reg(1).x === 0.U)\n") @[AsyncResetSpec.scala 77:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 77:11]
        skip @[AsyncResetSpec.scala 77:11]
      node _T_40 = eq(reg[1].y, UInt<1>("h00")) @[AsyncResetSpec.scala 78:21]
      node _T_41 = bits(reset, 0, 0) @[AsyncResetSpec.scala 78:11]
      node _T_42 = or(_T_40, _T_41) @[AsyncResetSpec.scala 78:11]
      node _T_43 = eq(_T_42, UInt<1>("h00")) @[AsyncResetSpec.scala 78:11]
      when _T_43 : @[AsyncResetSpec.scala 78:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:78 assert(reg(1).y === 0.U)\n") @[AsyncResetSpec.scala 78:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 78:11]
        skip @[AsyncResetSpec.scala 78:11]
      skip @[AsyncResetSpec.scala 74:38]
    else : @[AsyncResetSpec.scala 79:30]
      node _T_44 = geq(value_1, UInt<3>("h07")) @[AsyncResetSpec.scala 79:22]
      when _T_44 : @[AsyncResetSpec.scala 79:30]
        node _T_45 = eq(reg[0].x, UInt<3>("h05")) @[AsyncResetSpec.scala 80:21]
        node _T_46 = bits(reset, 0, 0) @[AsyncResetSpec.scala 80:11]
        node _T_47 = or(_T_45, _T_46) @[AsyncResetSpec.scala 80:11]
        node _T_48 = eq(_T_47, UInt<1>("h00")) @[AsyncResetSpec.scala 80:11]
        when _T_48 : @[AsyncResetSpec.scala 80:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:80 assert(reg(0).x === 5.U)\n") @[AsyncResetSpec.scala 80:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 80:11]
          skip @[AsyncResetSpec.scala 80:11]
        node _T_49 = eq(reg[0].y, UInt<3>("h06")) @[AsyncResetSpec.scala 81:21]
        node _T_50 = bits(reset, 0, 0) @[AsyncResetSpec.scala 81:11]
        node _T_51 = or(_T_49, _T_50) @[AsyncResetSpec.scala 81:11]
        node _T_52 = eq(_T_51, UInt<1>("h00")) @[AsyncResetSpec.scala 81:11]
        when _T_52 : @[AsyncResetSpec.scala 81:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:81 assert(reg(0).y === 6.U)\n") @[AsyncResetSpec.scala 81:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 81:11]
          skip @[AsyncResetSpec.scala 81:11]
        node _T_53 = eq(reg[1].x, UInt<3>("h07")) @[AsyncResetSpec.scala 82:21]
        node _T_54 = bits(reset, 0, 0) @[AsyncResetSpec.scala 82:11]
        node _T_55 = or(_T_53, _T_54) @[AsyncResetSpec.scala 82:11]
        node _T_56 = eq(_T_55, UInt<1>("h00")) @[AsyncResetSpec.scala 82:11]
        when _T_56 : @[AsyncResetSpec.scala 82:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:82 assert(reg(1).x === 7.U)\n") @[AsyncResetSpec.scala 82:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 82:11]
          skip @[AsyncResetSpec.scala 82:11]
        node _T_57 = eq(reg[1].y, UInt<4>("h08")) @[AsyncResetSpec.scala 83:21]
        node _T_58 = bits(reset, 0, 0) @[AsyncResetSpec.scala 83:11]
        node _T_59 = or(_T_57, _T_58) @[AsyncResetSpec.scala 83:11]
        node _T_60 = eq(_T_59, UInt<1>("h00")) @[AsyncResetSpec.scala 83:11]
        when _T_60 : @[AsyncResetSpec.scala 83:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:83 assert(reg(1).y === 8.U)\n") @[AsyncResetSpec.scala 83:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 83:11]
          skip @[AsyncResetSpec.scala 83:11]
        skip @[AsyncResetSpec.scala 79:30]
    when done : @[AsyncResetSpec.scala 86:15]
      node _T_61 = bits(reset, 0, 0) @[AsyncResetSpec.scala 87:9]
      node _T_62 = eq(_T_61, UInt<1>("h00")) @[AsyncResetSpec.scala 87:9]
      when _T_62 : @[AsyncResetSpec.scala 87:9]
        stop(clock, UInt<1>(1), 0) @[AsyncResetSpec.scala 87:9]
        skip @[AsyncResetSpec.scala 87:9]
      skip @[AsyncResetSpec.scala 86:15]
    
