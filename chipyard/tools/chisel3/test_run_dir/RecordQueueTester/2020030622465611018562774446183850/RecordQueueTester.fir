;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit RecordQueueTester : 
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : {bar : UInt<32>, foo : UInt<32>}}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : {bar : UInt<32>, foo : UInt<32>}}, count : UInt<3>}
    
    cmem _T_4 : {bar : UInt<32>, foo : UInt<32>}[4] @[Decoupled.scala 209:24]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg value_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_5 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:35]
    node _T_6 = eq(value, value_1) @[Decoupled.scala 214:41]
    node _T_7 = eq(_T_5, UInt<1>("h00")) @[Decoupled.scala 215:36]
    node _T_8 = and(_T_6, _T_7) @[Decoupled.scala 215:33]
    node _T_9 = and(_T_6, _T_5) @[Decoupled.scala 216:32]
    node _T_10 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire _T_11 : UInt<1>
    _T_11 <= _T_10
    node _T_12 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire _T_13 : UInt<1>
    _T_13 <= _T_12
    when _T_11 : @[Decoupled.scala 220:17]
      infer mport _T_16 = _T_4[value], clock @[Decoupled.scala 221:8]
      _T_16.foo <= io.enq.bits.foo @[Decoupled.scala 221:24]
      _T_16.bar <= io.enq.bits.bar @[Decoupled.scala 221:24]
      node wrap = eq(value, UInt<2>("h03")) @[Counter.scala 37:24]
      node _T_17 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_18 = tail(_T_17, 1) @[Counter.scala 38:22]
      value <= _T_18 @[Counter.scala 38:13]
      skip @[Decoupled.scala 220:17]
    when _T_13 : @[Decoupled.scala 224:17]
      node wrap_1 = eq(value_1, UInt<2>("h03")) @[Counter.scala 37:24]
      node _T_19 = add(value_1, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_20 = tail(_T_19, 1) @[Counter.scala 38:22]
      value_1 <= _T_20 @[Counter.scala 38:13]
      skip @[Decoupled.scala 224:17]
    node _T_21 = neq(_T_11, _T_13) @[Decoupled.scala 227:16]
    when _T_21 : @[Decoupled.scala 227:28]
      _T_5 <= _T_11 @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_22 = eq(_T_8, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_22 @[Decoupled.scala 231:16]
    node _T_23 = eq(_T_9, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_23 @[Decoupled.scala 232:16]
    infer mport _T_26 = _T_4[value_1], clock @[Decoupled.scala 233:21]
    io.deq.bits.foo <= _T_26.foo @[Decoupled.scala 233:15]
    io.deq.bits.bar <= _T_26.bar @[Decoupled.scala 233:15]
    node _T_27 = sub(value, value_1) @[Decoupled.scala 248:40]
    node _T_28 = tail(_T_27, 1) @[Decoupled.scala 248:40]
    node _T_29 = and(_T_5, _T_6) @[Decoupled.scala 250:32]
    node _T_30 = mux(_T_29, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_31 = or(_T_30, _T_28) @[Decoupled.scala 250:62]
    io.count <= _T_31 @[Decoupled.scala 250:14]
    
  module RecordQueueTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst queue of Queue @[RecordSpec.scala 63:23]
    queue.clock <= clock
    queue.reset <= reset
    queue.io.count is invalid @[RecordSpec.scala 64:14]
    queue.io.deq.bits.foo is invalid @[RecordSpec.scala 64:14]
    queue.io.deq.bits.bar is invalid @[RecordSpec.scala 64:14]
    queue.io.deq.valid is invalid @[RecordSpec.scala 64:14]
    queue.io.deq.ready is invalid @[RecordSpec.scala 64:14]
    queue.io.enq.bits.foo is invalid @[RecordSpec.scala 64:14]
    queue.io.enq.bits.bar is invalid @[RecordSpec.scala 64:14]
    queue.io.enq.valid is invalid @[RecordSpec.scala 64:14]
    queue.io.enq.ready is invalid @[RecordSpec.scala 64:14]
    queue.io.enq.valid <= UInt<1>("h00") @[RecordSpec.scala 65:24]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T = eq(value, UInt<2>("h03")) @[Counter.scala 37:24]
      node _T_1 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_2 = tail(_T_1, 1) @[Counter.scala 38:22]
      value <= _T_2 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node done = and(UInt<1>("h01"), _T) @[Counter.scala 72:20]
    node _T_3 = eq(value, UInt<1>("h00")) @[RecordSpec.scala 68:17]
    when _T_3 : @[RecordSpec.scala 68:26]
      queue.io.enq.bits.foo <= UInt<11>("h04d2") @[RecordSpec.scala 69:32]
      queue.io.enq.bits.bar <= UInt<13>("h0162e") @[RecordSpec.scala 70:32]
      queue.io.enq.valid <= UInt<1>("h01") @[RecordSpec.scala 71:26]
      skip @[RecordSpec.scala 68:26]
    node _T_4 = eq(value, UInt<1>("h01")) @[RecordSpec.scala 73:17]
    when _T_4 : @[RecordSpec.scala 73:26]
      queue.io.deq.ready <= UInt<1>("h01") @[RecordSpec.scala 74:26]
      node _T_5 = eq(queue.io.deq.valid, UInt<1>("h01")) @[RecordSpec.scala 75:33]
      node _T_6 = bits(reset, 0, 0) @[RecordSpec.scala 75:13]
      node _T_7 = or(_T_5, _T_6) @[RecordSpec.scala 75:13]
      node _T_8 = eq(_T_7, UInt<1>("h00")) @[RecordSpec.scala 75:13]
      when _T_8 : @[RecordSpec.scala 75:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:75 assert(queue.io.deq.valid === true.B)\n") @[RecordSpec.scala 75:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 75:13]
        skip @[RecordSpec.scala 75:13]
      node _T_9 = eq(queue.io.deq.bits.foo, UInt<11>("h04d2")) @[RecordSpec.scala 76:46]
      node _T_10 = bits(reset, 0, 0) @[RecordSpec.scala 76:13]
      node _T_11 = or(_T_9, _T_10) @[RecordSpec.scala 76:13]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[RecordSpec.scala 76:13]
      when _T_12 : @[RecordSpec.scala 76:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:76 assert(queue.io.deq.bits(\"foo\").asUInt === 1234.U)\n") @[RecordSpec.scala 76:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 76:13]
        skip @[RecordSpec.scala 76:13]
      node _T_13 = eq(queue.io.deq.bits.bar, UInt<13>("h0162e")) @[RecordSpec.scala 77:46]
      node _T_14 = bits(reset, 0, 0) @[RecordSpec.scala 77:13]
      node _T_15 = or(_T_13, _T_14) @[RecordSpec.scala 77:13]
      node _T_16 = eq(_T_15, UInt<1>("h00")) @[RecordSpec.scala 77:13]
      when _T_16 : @[RecordSpec.scala 77:13]
        printf(clock, UInt<1>(1), "Assertion failed\n    at RecordSpec.scala:77 assert(queue.io.deq.bits(\"bar\").asUInt === 5678.U)\n") @[RecordSpec.scala 77:13]
        stop(clock, UInt<1>(1), 1) @[RecordSpec.scala 77:13]
        skip @[RecordSpec.scala 77:13]
      skip @[RecordSpec.scala 73:26]
    when done : @[RecordSpec.scala 79:17]
      node _T_17 = bits(reset, 0, 0) @[RecordSpec.scala 80:11]
      node _T_18 = eq(_T_17, UInt<1>("h00")) @[RecordSpec.scala 80:11]
      when _T_18 : @[RecordSpec.scala 80:11]
        stop(clock, UInt<1>(1), 0) @[RecordSpec.scala 80:11]
        skip @[RecordSpec.scala 80:11]
      skip @[RecordSpec.scala 79:17]
    
