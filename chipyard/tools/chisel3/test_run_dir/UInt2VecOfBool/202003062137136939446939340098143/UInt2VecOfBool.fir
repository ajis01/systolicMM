;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit UInt2VecOfBool : 
  module UInt2VecOfBool : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg value : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T = eq(value, UInt<1>("h01")) @[Counter.scala 37:24]
      node _T_1 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_2 = tail(_T_1, 1) @[Counter.scala 38:22]
      value <= _T_2 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node done = and(UInt<1>("h01"), _T) @[Counter.scala 72:20]
    when done : @[CookbookSpec.scala 19:15]
      node _T_3 = bits(reset, 0, 0) @[CookbookSpec.scala 19:21]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[CookbookSpec.scala 19:21]
      when _T_4 : @[CookbookSpec.scala 19:21]
        stop(clock, UInt<1>(1), 0) @[CookbookSpec.scala 19:21]
        skip @[CookbookSpec.scala 19:21]
      skip @[CookbookSpec.scala 19:15]
    wire vec : UInt<1>[4] @[UInt2VecOfBool.scala 15:20]
    vec[0] <= UInt<1>("h00") @[UInt2VecOfBool.scala 15:20]
    vec[1] <= UInt<1>("h00") @[UInt2VecOfBool.scala 15:20]
    vec[2] <= UInt<1>("h01") @[UInt2VecOfBool.scala 15:20]
    vec[3] <= UInt<1>("h01") @[UInt2VecOfBool.scala 15:20]
    node _T_5 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 16:9]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[UInt2VecOfBool.scala 16:9]
    when _T_6 : @[UInt2VecOfBool.scala 16:9]
      printf(clock, UInt<1>(1), "Vec(%d, %d, %d, %d)", vec[0], vec[1], vec[2], vec[3]) @[UInt2VecOfBool.scala 16:9]
      skip @[UInt2VecOfBool.scala 16:9]
    node _T_7 = eq(vec[0], UInt<1>("h00")) @[UInt2VecOfBool.scala 19:17]
    node _T_8 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 19:9]
    node _T_9 = or(_T_7, _T_8) @[UInt2VecOfBool.scala 19:9]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[UInt2VecOfBool.scala 19:9]
    when _T_10 : @[UInt2VecOfBool.scala 19:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at UInt2VecOfBool.scala:19 assert(vec(0) === false.B)\n") @[UInt2VecOfBool.scala 19:9]
      stop(clock, UInt<1>(1), 1) @[UInt2VecOfBool.scala 19:9]
      skip @[UInt2VecOfBool.scala 19:9]
    node _T_11 = eq(vec[1], UInt<1>("h00")) @[UInt2VecOfBool.scala 20:17]
    node _T_12 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 20:9]
    node _T_13 = or(_T_11, _T_12) @[UInt2VecOfBool.scala 20:9]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[UInt2VecOfBool.scala 20:9]
    when _T_14 : @[UInt2VecOfBool.scala 20:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at UInt2VecOfBool.scala:20 assert(vec(1) === false.B)\n") @[UInt2VecOfBool.scala 20:9]
      stop(clock, UInt<1>(1), 1) @[UInt2VecOfBool.scala 20:9]
      skip @[UInt2VecOfBool.scala 20:9]
    node _T_15 = eq(vec[2], UInt<1>("h01")) @[UInt2VecOfBool.scala 21:17]
    node _T_16 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 21:9]
    node _T_17 = or(_T_15, _T_16) @[UInt2VecOfBool.scala 21:9]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[UInt2VecOfBool.scala 21:9]
    when _T_18 : @[UInt2VecOfBool.scala 21:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at UInt2VecOfBool.scala:21 assert(vec(2) === true.B)\n") @[UInt2VecOfBool.scala 21:9]
      stop(clock, UInt<1>(1), 1) @[UInt2VecOfBool.scala 21:9]
      skip @[UInt2VecOfBool.scala 21:9]
    node _T_19 = eq(vec[3], UInt<1>("h01")) @[UInt2VecOfBool.scala 22:17]
    node _T_20 = bits(reset, 0, 0) @[UInt2VecOfBool.scala 22:9]
    node _T_21 = or(_T_19, _T_20) @[UInt2VecOfBool.scala 22:9]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[UInt2VecOfBool.scala 22:9]
    when _T_22 : @[UInt2VecOfBool.scala 22:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at UInt2VecOfBool.scala:22 assert(vec(3) === true.B)\n") @[UInt2VecOfBool.scala 22:9]
      stop(clock, UInt<1>(1), 1) @[UInt2VecOfBool.scala 22:9]
      skip @[UInt2VecOfBool.scala 22:9]
    
