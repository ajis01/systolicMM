;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit AsyncResetTester : 
  module AsyncResetTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T = eq(value, UInt<2>("h03")) @[Counter.scala 37:24]
      node _T_1 = add(value, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_2 = tail(_T_1, 1) @[Counter.scala 38:22]
      value <= _T_2 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node cDiv = and(UInt<1>("h01"), _T) @[Counter.scala 72:20]
    node slowClk = asClock(cDiv) @[AsyncResetSpec.scala 13:22]
    reg value_1 : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 29:33]
    when UInt<1>("h01") : @[Counter.scala 71:17]
      node _T_3 = eq(value_1, UInt<4>("h0f")) @[Counter.scala 37:24]
      node _T_4 = add(value_1, UInt<1>("h01")) @[Counter.scala 38:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 38:22]
      value_1 <= _T_5 @[Counter.scala 38:13]
      skip @[Counter.scala 71:17]
    node done = and(UInt<1>("h01"), _T_3) @[Counter.scala 72:20]
    reg asyncResetNext : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AsyncResetSpec.scala 17:31]
    node _T_6 = eq(value_1, UInt<3>("h04")) @[AsyncResetSpec.scala 18:27]
    asyncResetNext <= _T_6 @[AsyncResetSpec.scala 18:18]
    node asyncReset = asAsyncReset(asyncResetNext) @[AsyncResetSpec.scala 19:35]
    reg reg : UInt<8>, slowClk with : (reset => (asyncReset, UInt<8>("h07b"))) @[AsyncResetSpec.scala 22:12]
    reg <= UInt<3>("h05") @[AsyncResetSpec.scala 24:7]
    node _T_7 = eq(value_1, UInt<2>("h03")) @[AsyncResetSpec.scala 26:15]
    when _T_7 : @[AsyncResetSpec.scala 26:24]
      node _T_8 = eq(reg, UInt<3>("h05")) @[AsyncResetSpec.scala 27:16]
      node _T_9 = bits(reset, 0, 0) @[AsyncResetSpec.scala 27:11]
      node _T_10 = or(_T_8, _T_9) @[AsyncResetSpec.scala 27:11]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[AsyncResetSpec.scala 27:11]
      when _T_11 : @[AsyncResetSpec.scala 27:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:27 assert(reg === 5.U)\n") @[AsyncResetSpec.scala 27:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 27:11]
        skip @[AsyncResetSpec.scala 27:11]
      skip @[AsyncResetSpec.scala 26:24]
    node _T_12 = geq(value_1, UInt<3>("h05")) @[AsyncResetSpec.scala 29:15]
    node _T_13 = lt(value_1, UInt<3>("h07")) @[AsyncResetSpec.scala 29:31]
    node _T_14 = and(_T_12, _T_13) @[AsyncResetSpec.scala 29:22]
    when _T_14 : @[AsyncResetSpec.scala 29:38]
      node _T_15 = eq(reg, UInt<7>("h07b")) @[AsyncResetSpec.scala 30:16]
      node _T_16 = bits(reset, 0, 0) @[AsyncResetSpec.scala 30:11]
      node _T_17 = or(_T_15, _T_16) @[AsyncResetSpec.scala 30:11]
      node _T_18 = eq(_T_17, UInt<1>("h00")) @[AsyncResetSpec.scala 30:11]
      when _T_18 : @[AsyncResetSpec.scala 30:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:30 assert(reg === 123.U)\n") @[AsyncResetSpec.scala 30:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 30:11]
        skip @[AsyncResetSpec.scala 30:11]
      skip @[AsyncResetSpec.scala 29:38]
    else : @[AsyncResetSpec.scala 31:30]
      node _T_19 = geq(value_1, UInt<3>("h07")) @[AsyncResetSpec.scala 31:22]
      when _T_19 : @[AsyncResetSpec.scala 31:30]
        node _T_20 = eq(reg, UInt<3>("h05")) @[AsyncResetSpec.scala 32:16]
        node _T_21 = bits(reset, 0, 0) @[AsyncResetSpec.scala 32:11]
        node _T_22 = or(_T_20, _T_21) @[AsyncResetSpec.scala 32:11]
        node _T_23 = eq(_T_22, UInt<1>("h00")) @[AsyncResetSpec.scala 32:11]
        when _T_23 : @[AsyncResetSpec.scala 32:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:32 assert(reg === 5.U)\n") @[AsyncResetSpec.scala 32:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 32:11]
          skip @[AsyncResetSpec.scala 32:11]
        skip @[AsyncResetSpec.scala 31:30]
    when done : @[AsyncResetSpec.scala 35:15]
      node _T_24 = bits(reset, 0, 0) @[AsyncResetSpec.scala 36:9]
      node _T_25 = eq(_T_24, UInt<1>("h00")) @[AsyncResetSpec.scala 36:9]
      when _T_25 : @[AsyncResetSpec.scala 36:9]
        stop(clock, UInt<1>(1), 0) @[AsyncResetSpec.scala 36:9]
        skip @[AsyncResetSpec.scala 36:9]
      skip @[AsyncResetSpec.scala 35:15]
    
