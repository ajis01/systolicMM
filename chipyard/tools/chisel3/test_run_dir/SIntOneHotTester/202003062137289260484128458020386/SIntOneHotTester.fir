;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.12.10, sbtVersion: 1.2.8
circuit SIntOneHotTester : 
  module SIntOneHotTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire out : SInt @[OneHotMuxSpec.scala 71:17]
    wire _T : SInt<5> @[Mux.scala 27:72]
    node _T_1 = asUInt(asSInt(UInt<3>("h05"))) @[Mux.scala 27:72]
    node _T_2 = asSInt(_T_1) @[Mux.scala 27:72]
    _T <= _T_2 @[Mux.scala 27:72]
    wire _T_3 : SInt<5> @[Mux.scala 27:72]
    node _T_4 = asUInt(asSInt(UInt<4>("h0b"))) @[Mux.scala 27:72]
    node _T_5 = asSInt(_T_4) @[Mux.scala 27:72]
    _T_3 <= _T_5 @[Mux.scala 27:72]
    wire _T_6 : SInt<5> @[Mux.scala 27:72]
    node _T_7 = asUInt(asSInt(UInt<4>("h09"))) @[Mux.scala 27:72]
    node _T_8 = asSInt(_T_7) @[Mux.scala 27:72]
    _T_6 <= _T_8 @[Mux.scala 27:72]
    wire _T_9 : SInt<5> @[Mux.scala 27:72]
    node _T_10 = asUInt(asSInt(UInt<5>("h015"))) @[Mux.scala 27:72]
    node _T_11 = asSInt(_T_10) @[Mux.scala 27:72]
    _T_9 <= _T_11 @[Mux.scala 27:72]
    node _T_12 = mux(UInt<1>("h00"), _T, asSInt(UInt<1>("h00"))) @[Mux.scala 27:72]
    node _T_13 = mux(UInt<1>("h01"), _T_3, asSInt(UInt<1>("h00"))) @[Mux.scala 27:72]
    node _T_14 = mux(UInt<1>("h00"), _T_6, asSInt(UInt<1>("h00"))) @[Mux.scala 27:72]
    node _T_15 = mux(UInt<1>("h00"), _T_9, asSInt(UInt<1>("h00"))) @[Mux.scala 27:72]
    node _T_16 = or(_T_12, _T_13) @[Mux.scala 27:72]
    node _T_17 = asSInt(_T_16) @[Mux.scala 27:72]
    node _T_18 = or(_T_17, _T_14) @[Mux.scala 27:72]
    node _T_19 = asSInt(_T_18) @[Mux.scala 27:72]
    node _T_20 = or(_T_19, _T_15) @[Mux.scala 27:72]
    node _T_21 = asSInt(_T_20) @[Mux.scala 27:72]
    wire _T_22 : SInt<5> @[Mux.scala 27:72]
    node _T_23 = asUInt(_T_21) @[Mux.scala 27:72]
    node _T_24 = asSInt(_T_23) @[Mux.scala 27:72]
    _T_22 <= _T_24 @[Mux.scala 27:72]
    out <= _T_22 @[OneHotMuxSpec.scala 72:7]
    node _T_25 = eq(out, asSInt(UInt<4>("h0b"))) @[OneHotMuxSpec.scala 79:14]
    node _T_26 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 79:9]
    node _T_27 = or(_T_25, _T_26) @[OneHotMuxSpec.scala 79:9]
    node _T_28 = eq(_T_27, UInt<1>("h00")) @[OneHotMuxSpec.scala 79:9]
    when _T_28 : @[OneHotMuxSpec.scala 79:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at OneHotMuxSpec.scala:79 assert(out === (-5).S)\n") @[OneHotMuxSpec.scala 79:9]
      stop(clock, UInt<1>(1), 1) @[OneHotMuxSpec.scala 79:9]
      skip @[OneHotMuxSpec.scala 79:9]
    node _T_29 = bits(reset, 0, 0) @[OneHotMuxSpec.scala 81:7]
    node _T_30 = eq(_T_29, UInt<1>("h00")) @[OneHotMuxSpec.scala 81:7]
    when _T_30 : @[OneHotMuxSpec.scala 81:7]
      stop(clock, UInt<1>(1), 0) @[OneHotMuxSpec.scala 81:7]
      skip @[OneHotMuxSpec.scala 81:7]
    
