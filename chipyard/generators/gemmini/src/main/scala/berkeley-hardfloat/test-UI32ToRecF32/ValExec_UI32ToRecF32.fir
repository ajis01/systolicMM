;buildInfoPackage: chisel3, version: 3.2-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit ValExec_UI32ToRecF32 : 
  module RoundAnyRawFNToRecFN : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<8>, sig : UInt<33>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h00")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h01")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h02")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h03")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h04")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h06")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node _T_3 = add(io.in.sExp, asSInt(UInt<9>("h0c0"))) @[RoundAnyRawFNToRecFN.scala 102:25]
    node _T_4 = bits(_T_3, 8, 0) @[RoundAnyRawFNToRecFN.scala 104:14]
    node sAdjustedExp = cvt(_T_4) @[RoundAnyRawFNToRecFN.scala 104:31]
    node _T_5 = bits(io.in.sig, 32, 7) @[RoundAnyRawFNToRecFN.scala 114:26]
    node _T_6 = bits(io.in.sig, 6, 0) @[RoundAnyRawFNToRecFN.scala 115:26]
    node _T_7 = neq(_T_6, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 115:60]
    node adjustedSig = cat(_T_5, _T_7) @[Cat.scala 29:58]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<23> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_8 = cat(UInt<24>("h00"), UInt<1>("h00")) @[Cat.scala 29:58]
    node _T_9 = cat(_T_8, UInt<2>("h03")) @[Cat.scala 29:58]
    node _T_10 = shr(_T_9, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_11 = cat(UInt<1>("h00"), _T_10) @[Cat.scala 29:58]
    node _T_12 = not(_T_11) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_13 = and(_T_12, _T_9) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_14 = and(adjustedSig, _T_13) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_15 = neq(_T_14, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_16 = and(adjustedSig, _T_11) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_17 = neq(_T_16, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_18 = or(_T_15, _T_17) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_19 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_20 = and(_T_19, _T_15) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_21 = and(roundMagUp, _T_18) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_22 = or(_T_20, _T_21) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_23 = or(adjustedSig, _T_9) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_24 = shr(_T_23, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_25 = add(_T_24, UInt<1>("h01")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_26 = and(roundingMode_near_even, _T_15) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_27 = eq(_T_17, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_28 = and(_T_26, _T_27) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_29 = shr(_T_9, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_30 = mux(_T_28, _T_29, UInt<26>("h00")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_31 = not(_T_30) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_32 = and(_T_25, _T_31) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_33 = not(_T_9) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_34 = and(adjustedSig, _T_33) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_35 = shr(_T_34, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_36 = and(roundingMode_odd, _T_18) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_37 = shr(_T_13, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_38 = mux(_T_36, _T_37, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_39 = or(_T_35, _T_38) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_40 = mux(_T_22, _T_32, _T_39) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_41 = shr(_T_40, 24) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_42 = cvt(_T_41) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_43 = add(sAdjustedExp, _T_42) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_44 = bits(_T_43, 8, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_44 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_45 = bits(_T_40, 23, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_46 = bits(_T_40, 22, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_47 = mux(UInt<1>("h00"), _T_45, _T_46) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_47 @[RoundAnyRawFNToRecFN.scala 186:25]
    common_overflow <= UInt<1>("h00") @[RoundAnyRawFNToRecFN.scala 191:25]
    common_totalUnderflow <= UInt<1>("h00") @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_48 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_49 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_50 = mux(UInt<1>("h00"), _T_48, _T_49) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_51 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_52 = and(UInt<1>("h00"), _T_51) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_53 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_54 = neq(_T_53, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_55 = or(_T_52, _T_54) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_56 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_57 = and(_T_56, _T_50) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_58 = and(roundMagUp, _T_55) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_59 = or(_T_57, _T_58) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_60 = bits(_T_40, 25, 25) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_61 = bits(_T_40, 24, 24) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_62 = mux(UInt<1>("h00"), _T_60, _T_61) @[RoundAnyRawFNToRecFN.scala 209:16]
    common_underflow <= UInt<1>("h00") @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_63 = or(common_totalUnderflow, _T_18) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_63 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_64 = eq(isNaNOut, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_65 = eq(notNaN_isSpecialInfOut, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_66 = and(_T_64, _T_65) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_67 = eq(io.in.isZero, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_66, _T_67) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_68 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_68) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_69 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_69, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_70 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_71 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_70, _T_71) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_72 = eq(overflow_roundMagUp, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_72) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_73 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_73) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h00"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_74 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_75 = mux(_T_74, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_76 = not(_T_75) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_77 = and(common_expOut, _T_76) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_78 = not(UInt<9>("h06b")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_79 = mux(pegMinNonzeroMagOut, _T_78, UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_80 = not(_T_79) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_81 = and(_T_77, _T_80) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_82 = mux(pegMaxFiniteMagOut, UInt<9>("h080"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_83 = not(_T_82) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_84 = and(_T_81, _T_83) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_85 = mux(notNaN_isInfOut, UInt<9>("h040"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_86 = not(_T_85) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_87 = and(_T_84, _T_86) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_88 = mux(pegMinNonzeroMagOut, UInt<9>("h06b"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_89 = or(_T_87, _T_88) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_90 = mux(pegMaxFiniteMagOut, UInt<9>("h017f"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_91 = or(_T_89, _T_90) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_92 = mux(notNaN_isInfOut, UInt<9>("h0180"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_93 = or(_T_91, _T_92) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_94 = mux(isNaNOut, UInt<9>("h01c0"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_93, _T_94) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_95 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_96 = or(_T_95, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_97 = mux(isNaNOut, UInt<23>("h0400000"), UInt<1>("h00")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_98 = mux(_T_96, _T_97, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_99 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 71:15]
    node _T_100 = mux(_T_99, UInt<23>("h07fffff"), UInt<23>("h00")) @[Bitwise.scala 71:12]
    node fractOut = or(_T_98, _T_100) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_101 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_102 = cat(_T_101, fractOut) @[Cat.scala 29:58]
    io.out <= _T_102 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_103 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_104 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_105 = cat(_T_104, overflow) @[Cat.scala 29:58]
    node _T_106 = cat(_T_105, _T_103) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_106 @[RoundAnyRawFNToRecFN.scala 285:23]
    
  module INToRecFN : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip signedIn : UInt<1>, flip in : UInt<32>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<33>, exceptionFlags : UInt<5>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T = bits(io.in, 31, 31) @[rawFloatFromIN.scala 50:34]
    node _T_1 = and(io.signedIn, _T) @[rawFloatFromIN.scala 50:29]
    node _T_2 = sub(UInt<1>("h00"), io.in) @[rawFloatFromIN.scala 51:31]
    node _T_3 = tail(_T_2, 1) @[rawFloatFromIN.scala 51:31]
    node _T_4 = mux(_T_1, _T_3, io.in) @[rawFloatFromIN.scala 51:24]
    node _T_5 = cat(UInt<32>("h00"), _T_4) @[Cat.scala 29:58]
    node _T_6 = bits(_T_5, 31, 0) @[rawFloatFromIN.scala 52:56]
    node _T_7 = bits(_T_6, 0, 0) @[primitives.scala 92:52]
    node _T_8 = bits(_T_6, 1, 1) @[primitives.scala 92:52]
    node _T_9 = bits(_T_6, 2, 2) @[primitives.scala 92:52]
    node _T_10 = bits(_T_6, 3, 3) @[primitives.scala 92:52]
    node _T_11 = bits(_T_6, 4, 4) @[primitives.scala 92:52]
    node _T_12 = bits(_T_6, 5, 5) @[primitives.scala 92:52]
    node _T_13 = bits(_T_6, 6, 6) @[primitives.scala 92:52]
    node _T_14 = bits(_T_6, 7, 7) @[primitives.scala 92:52]
    node _T_15 = bits(_T_6, 8, 8) @[primitives.scala 92:52]
    node _T_16 = bits(_T_6, 9, 9) @[primitives.scala 92:52]
    node _T_17 = bits(_T_6, 10, 10) @[primitives.scala 92:52]
    node _T_18 = bits(_T_6, 11, 11) @[primitives.scala 92:52]
    node _T_19 = bits(_T_6, 12, 12) @[primitives.scala 92:52]
    node _T_20 = bits(_T_6, 13, 13) @[primitives.scala 92:52]
    node _T_21 = bits(_T_6, 14, 14) @[primitives.scala 92:52]
    node _T_22 = bits(_T_6, 15, 15) @[primitives.scala 92:52]
    node _T_23 = bits(_T_6, 16, 16) @[primitives.scala 92:52]
    node _T_24 = bits(_T_6, 17, 17) @[primitives.scala 92:52]
    node _T_25 = bits(_T_6, 18, 18) @[primitives.scala 92:52]
    node _T_26 = bits(_T_6, 19, 19) @[primitives.scala 92:52]
    node _T_27 = bits(_T_6, 20, 20) @[primitives.scala 92:52]
    node _T_28 = bits(_T_6, 21, 21) @[primitives.scala 92:52]
    node _T_29 = bits(_T_6, 22, 22) @[primitives.scala 92:52]
    node _T_30 = bits(_T_6, 23, 23) @[primitives.scala 92:52]
    node _T_31 = bits(_T_6, 24, 24) @[primitives.scala 92:52]
    node _T_32 = bits(_T_6, 25, 25) @[primitives.scala 92:52]
    node _T_33 = bits(_T_6, 26, 26) @[primitives.scala 92:52]
    node _T_34 = bits(_T_6, 27, 27) @[primitives.scala 92:52]
    node _T_35 = bits(_T_6, 28, 28) @[primitives.scala 92:52]
    node _T_36 = bits(_T_6, 29, 29) @[primitives.scala 92:52]
    node _T_37 = bits(_T_6, 30, 30) @[primitives.scala 92:52]
    node _T_38 = bits(_T_6, 31, 31) @[primitives.scala 92:52]
    node _T_39 = mux(_T_8, UInt<5>("h01e"), UInt<5>("h01f")) @[Mux.scala 47:69]
    node _T_40 = mux(_T_9, UInt<5>("h01d"), _T_39) @[Mux.scala 47:69]
    node _T_41 = mux(_T_10, UInt<5>("h01c"), _T_40) @[Mux.scala 47:69]
    node _T_42 = mux(_T_11, UInt<5>("h01b"), _T_41) @[Mux.scala 47:69]
    node _T_43 = mux(_T_12, UInt<5>("h01a"), _T_42) @[Mux.scala 47:69]
    node _T_44 = mux(_T_13, UInt<5>("h019"), _T_43) @[Mux.scala 47:69]
    node _T_45 = mux(_T_14, UInt<5>("h018"), _T_44) @[Mux.scala 47:69]
    node _T_46 = mux(_T_15, UInt<5>("h017"), _T_45) @[Mux.scala 47:69]
    node _T_47 = mux(_T_16, UInt<5>("h016"), _T_46) @[Mux.scala 47:69]
    node _T_48 = mux(_T_17, UInt<5>("h015"), _T_47) @[Mux.scala 47:69]
    node _T_49 = mux(_T_18, UInt<5>("h014"), _T_48) @[Mux.scala 47:69]
    node _T_50 = mux(_T_19, UInt<5>("h013"), _T_49) @[Mux.scala 47:69]
    node _T_51 = mux(_T_20, UInt<5>("h012"), _T_50) @[Mux.scala 47:69]
    node _T_52 = mux(_T_21, UInt<5>("h011"), _T_51) @[Mux.scala 47:69]
    node _T_53 = mux(_T_22, UInt<5>("h010"), _T_52) @[Mux.scala 47:69]
    node _T_54 = mux(_T_23, UInt<4>("h0f"), _T_53) @[Mux.scala 47:69]
    node _T_55 = mux(_T_24, UInt<4>("h0e"), _T_54) @[Mux.scala 47:69]
    node _T_56 = mux(_T_25, UInt<4>("h0d"), _T_55) @[Mux.scala 47:69]
    node _T_57 = mux(_T_26, UInt<4>("h0c"), _T_56) @[Mux.scala 47:69]
    node _T_58 = mux(_T_27, UInt<4>("h0b"), _T_57) @[Mux.scala 47:69]
    node _T_59 = mux(_T_28, UInt<4>("h0a"), _T_58) @[Mux.scala 47:69]
    node _T_60 = mux(_T_29, UInt<4>("h09"), _T_59) @[Mux.scala 47:69]
    node _T_61 = mux(_T_30, UInt<4>("h08"), _T_60) @[Mux.scala 47:69]
    node _T_62 = mux(_T_31, UInt<3>("h07"), _T_61) @[Mux.scala 47:69]
    node _T_63 = mux(_T_32, UInt<3>("h06"), _T_62) @[Mux.scala 47:69]
    node _T_64 = mux(_T_33, UInt<3>("h05"), _T_63) @[Mux.scala 47:69]
    node _T_65 = mux(_T_34, UInt<3>("h04"), _T_64) @[Mux.scala 47:69]
    node _T_66 = mux(_T_35, UInt<2>("h03"), _T_65) @[Mux.scala 47:69]
    node _T_67 = mux(_T_36, UInt<2>("h02"), _T_66) @[Mux.scala 47:69]
    node _T_68 = mux(_T_37, UInt<1>("h01"), _T_67) @[Mux.scala 47:69]
    node _T_69 = mux(_T_38, UInt<1>("h00"), _T_68) @[Mux.scala 47:69]
    node _T_70 = dshl(_T_6, _T_69) @[rawFloatFromIN.scala 55:22]
    node _T_71 = bits(_T_70, 31, 0) @[rawFloatFromIN.scala 55:41]
    wire intAsRawFloat : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<8>, sig : UInt<33>} @[rawFloatFromIN.scala 58:23]
    intAsRawFloat is invalid @[rawFloatFromIN.scala 58:23]
    intAsRawFloat.isNaN <= UInt<1>("h00") @[rawFloatFromIN.scala 59:20]
    intAsRawFloat.isInf <= UInt<1>("h00") @[rawFloatFromIN.scala 60:20]
    node _T_72 = bits(_T_71, 31, 31) @[rawFloatFromIN.scala 61:28]
    node _T_73 = eq(_T_72, UInt<1>("h00")) @[rawFloatFromIN.scala 61:23]
    intAsRawFloat.isZero <= _T_73 @[rawFloatFromIN.scala 61:20]
    intAsRawFloat.sign <= _T_1 @[rawFloatFromIN.scala 62:20]
    node _T_74 = bits(_T_69, 4, 0) @[rawFloatFromIN.scala 63:56]
    node _T_75 = not(_T_74) @[rawFloatFromIN.scala 63:39]
    node _T_76 = cat(UInt<2>("h02"), _T_75) @[Cat.scala 29:58]
    node _T_77 = cvt(_T_76) @[rawFloatFromIN.scala 63:75]
    intAsRawFloat.sExp <= _T_77 @[rawFloatFromIN.scala 63:20]
    intAsRawFloat.sig <= _T_71 @[rawFloatFromIN.scala 64:20]
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[INToRecFN.scala 59:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.clock <= clock
    roundAnyRawFNToRecFN.reset <= reset
    roundAnyRawFNToRecFN.io.invalidExc <= UInt<1>("h00") @[INToRecFN.scala 67:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h00") @[INToRecFN.scala 68:44]
    roundAnyRawFNToRecFN.io.in <- intAsRawFloat @[INToRecFN.scala 69:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[INToRecFN.scala 71:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[INToRecFN.scala 72:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[INToRecFN.scala 73:23]
    
  module ValExec_UI32ToRecF32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<32>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, expected : {flip out : UInt<32>, flip exceptionFlags : UInt<5>, recOut : UInt<33>}, actual : {out : UInt<33>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst iNToRecFN of INToRecFN @[ValExec_INToRecFN.scala 66:27]
    iNToRecFN.io is invalid
    iNToRecFN.clock <= clock
    iNToRecFN.reset <= reset
    iNToRecFN.io.signedIn <= UInt<1>("h00") @[ValExec_INToRecFN.scala 67:27]
    iNToRecFN.io.in <= io.in @[ValExec_INToRecFN.scala 68:21]
    iNToRecFN.io.roundingMode <= io.roundingMode @[ValExec_INToRecFN.scala 69:33]
    iNToRecFN.io.detectTininess <= io.detectTininess @[ValExec_INToRecFN.scala 70:33]
    node _T = bits(io.expected.out, 31, 31) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.expected.out, 30, 23) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.expected.out, 22, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h00")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h00")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = bits(_T_2, 10, 10) @[primitives.scala 92:52]
    node _T_16 = bits(_T_2, 11, 11) @[primitives.scala 92:52]
    node _T_17 = bits(_T_2, 12, 12) @[primitives.scala 92:52]
    node _T_18 = bits(_T_2, 13, 13) @[primitives.scala 92:52]
    node _T_19 = bits(_T_2, 14, 14) @[primitives.scala 92:52]
    node _T_20 = bits(_T_2, 15, 15) @[primitives.scala 92:52]
    node _T_21 = bits(_T_2, 16, 16) @[primitives.scala 92:52]
    node _T_22 = bits(_T_2, 17, 17) @[primitives.scala 92:52]
    node _T_23 = bits(_T_2, 18, 18) @[primitives.scala 92:52]
    node _T_24 = bits(_T_2, 19, 19) @[primitives.scala 92:52]
    node _T_25 = bits(_T_2, 20, 20) @[primitives.scala 92:52]
    node _T_26 = bits(_T_2, 21, 21) @[primitives.scala 92:52]
    node _T_27 = bits(_T_2, 22, 22) @[primitives.scala 92:52]
    node _T_28 = mux(_T_6, UInt<5>("h015"), UInt<5>("h016")) @[Mux.scala 47:69]
    node _T_29 = mux(_T_7, UInt<5>("h014"), _T_28) @[Mux.scala 47:69]
    node _T_30 = mux(_T_8, UInt<5>("h013"), _T_29) @[Mux.scala 47:69]
    node _T_31 = mux(_T_9, UInt<5>("h012"), _T_30) @[Mux.scala 47:69]
    node _T_32 = mux(_T_10, UInt<5>("h011"), _T_31) @[Mux.scala 47:69]
    node _T_33 = mux(_T_11, UInt<5>("h010"), _T_32) @[Mux.scala 47:69]
    node _T_34 = mux(_T_12, UInt<4>("h0f"), _T_33) @[Mux.scala 47:69]
    node _T_35 = mux(_T_13, UInt<4>("h0e"), _T_34) @[Mux.scala 47:69]
    node _T_36 = mux(_T_14, UInt<4>("h0d"), _T_35) @[Mux.scala 47:69]
    node _T_37 = mux(_T_15, UInt<4>("h0c"), _T_36) @[Mux.scala 47:69]
    node _T_38 = mux(_T_16, UInt<4>("h0b"), _T_37) @[Mux.scala 47:69]
    node _T_39 = mux(_T_17, UInt<4>("h0a"), _T_38) @[Mux.scala 47:69]
    node _T_40 = mux(_T_18, UInt<4>("h09"), _T_39) @[Mux.scala 47:69]
    node _T_41 = mux(_T_19, UInt<4>("h08"), _T_40) @[Mux.scala 47:69]
    node _T_42 = mux(_T_20, UInt<3>("h07"), _T_41) @[Mux.scala 47:69]
    node _T_43 = mux(_T_21, UInt<3>("h06"), _T_42) @[Mux.scala 47:69]
    node _T_44 = mux(_T_22, UInt<3>("h05"), _T_43) @[Mux.scala 47:69]
    node _T_45 = mux(_T_23, UInt<3>("h04"), _T_44) @[Mux.scala 47:69]
    node _T_46 = mux(_T_24, UInt<2>("h03"), _T_45) @[Mux.scala 47:69]
    node _T_47 = mux(_T_25, UInt<2>("h02"), _T_46) @[Mux.scala 47:69]
    node _T_48 = mux(_T_26, UInt<1>("h01"), _T_47) @[Mux.scala 47:69]
    node _T_49 = mux(_T_27, UInt<1>("h00"), _T_48) @[Mux.scala 47:69]
    node _T_50 = dshl(_T_2, _T_49) @[rawFloatFromFN.scala 54:36]
    node _T_51 = bits(_T_50, 21, 0) @[rawFloatFromFN.scala 54:47]
    node _T_52 = shl(_T_51, 1) @[rawFloatFromFN.scala 54:64]
    node _T_53 = xor(_T_49, UInt<9>("h01ff")) @[rawFloatFromFN.scala 57:26]
    node _T_54 = mux(_T_3, _T_53, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_55 = mux(_T_3, UInt<2>("h02"), UInt<1>("h01")) @[rawFloatFromFN.scala 60:27]
    node _T_56 = or(UInt<8>("h080"), _T_55) @[rawFloatFromFN.scala 60:22]
    node _T_57 = add(_T_54, _T_56) @[rawFloatFromFN.scala 59:15]
    node _T_58 = tail(_T_57, 1) @[rawFloatFromFN.scala 59:15]
    node _T_59 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_60 = bits(_T_58, 8, 7) @[rawFloatFromFN.scala 63:37]
    node _T_61 = eq(_T_60, UInt<2>("h03")) @[rawFloatFromFN.scala 63:62]
    wire _T_62 : {isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 65:23]
    _T_62 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_63 = eq(_T_4, UInt<1>("h00")) @[rawFloatFromFN.scala 66:36]
    node _T_64 = and(_T_61, _T_63) @[rawFloatFromFN.scala 66:33]
    _T_62.isNaN <= _T_64 @[rawFloatFromFN.scala 66:20]
    node _T_65 = and(_T_61, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_62.isInf <= _T_65 @[rawFloatFromFN.scala 67:20]
    _T_62.isZero <= _T_59 @[rawFloatFromFN.scala 68:20]
    _T_62.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_66 = bits(_T_58, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _T_67 = cvt(_T_66) @[rawFloatFromFN.scala 70:48]
    _T_62.sExp <= _T_67 @[rawFloatFromFN.scala 70:20]
    node _T_68 = eq(_T_59, UInt<1>("h00")) @[rawFloatFromFN.scala 72:29]
    node _T_69 = mux(_T_3, _T_52, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_70 = cat(UInt<1>("h00"), _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
    _T_62.sig <= _T_71 @[rawFloatFromFN.scala 71:17]
    node _T_72 = bits(_T_62.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _T_73 = mux(_T_62.isZero, UInt<3>("h00"), _T_72) @[recFNFromFN.scala 48:16]
    node _T_74 = mux(_T_62.isNaN, UInt<1>("h01"), UInt<1>("h00")) @[recFNFromFN.scala 49:20]
    node _T_75 = or(_T_73, _T_74) @[recFNFromFN.scala 48:79]
    node _T_76 = bits(_T_62.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_77 = bits(_T_62.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_78 = cat(_T_76, _T_77) @[Cat.scala 29:58]
    node _T_79 = cat(_T_62.sign, _T_75) @[Cat.scala 29:58]
    node _T_80 = cat(_T_79, _T_78) @[Cat.scala 29:58]
    io.expected.recOut <= _T_80 @[ValExec_INToRecFN.scala 72:24]
    io.actual.out <= iNToRecFN.io.out @[ValExec_INToRecFN.scala 74:19]
    io.actual.exceptionFlags <= iNToRecFN.io.exceptionFlags @[ValExec_INToRecFN.scala 75:30]
    io.check <= UInt<1>("h01") @[ValExec_INToRecFN.scala 77:14]
    node _T_81 = bits(io.actual.out, 32, 29) @[tests.scala 46:22]
    node _T_82 = bits(io.expected.recOut, 32, 29) @[tests.scala 47:22]
    node _T_83 = bits(_T_81, 2, 0) @[tests.scala 48:19]
    node _T_84 = eq(_T_83, UInt<1>("h00")) @[tests.scala 48:26]
    node _T_85 = bits(_T_81, 2, 0) @[tests.scala 48:48]
    node _T_86 = eq(_T_85, UInt<3>("h07")) @[tests.scala 48:55]
    node _T_87 = or(_T_84, _T_86) @[tests.scala 48:39]
    node _T_88 = eq(_T_81, _T_82) @[tests.scala 49:20]
    node _T_89 = bits(io.actual.out, 22, 0) @[tests.scala 49:36]
    node _T_90 = bits(io.expected.recOut, 22, 0) @[tests.scala 49:59]
    node _T_91 = eq(_T_89, _T_90) @[tests.scala 49:54]
    node _T_92 = and(_T_88, _T_91) @[tests.scala 49:31]
    node _T_93 = bits(_T_81, 2, 0) @[tests.scala 50:23]
    node _T_94 = eq(_T_93, UInt<3>("h06")) @[tests.scala 50:30]
    node _T_95 = eq(_T_81, _T_82) @[tests.scala 50:51]
    node _T_96 = eq(io.actual.out, io.expected.recOut) @[tests.scala 50:66]
    node _T_97 = mux(_T_94, _T_95, _T_96) @[tests.scala 50:16]
    node _T_98 = mux(_T_87, _T_92, _T_97) @[tests.scala 48:12]
    node _T_99 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_INToRecFN.scala 80:35]
    node _T_100 = and(_T_98, _T_99) @[ValExec_INToRecFN.scala 79:75]
    io.pass <= _T_100 @[ValExec_INToRecFN.scala 78:13]
    
